# -*- coding: utf-8 -*-
"""36106-AT1-25589351-experiment-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vvkrRXjLboLiyS7jdQ9h_KCwqOlOXDZn

# **Experiment Notebook**

---
## 0. Setup Environment

### 0.a Install Mandatory Packages

> Do not modify this code before running it
"""

# Commented out IPython magic to ensure Python compatibility.
# Do not modify this code

import os
import sys
from pathlib import Path

COURSE = "36106"
ASSIGNMENT = "AT1"
DATA = "data"

asgmt_path = f"{COURSE}/assignment/{ASSIGNMENT}"
root_path = "./"

print("###### Install required Python packages ######")
! pip install -r https://raw.githubusercontent.com/aso-uts/labs_datasets/main/36106-mlaa/requirements.txt

if os.getenv("COLAB_RELEASE_TAG"):

    from google.colab import drive
    from pathlib import Path

    print("\n###### Connect to personal Google Drive ######")
    gdrive_path = "/content/gdrive"
    drive.mount(gdrive_path)
    root_path = f"{gdrive_path}/MyDrive/"

print("\n###### Setting up folders ######")
folder_path = Path(f"{root_path}/{asgmt_path}/") / DATA
folder_path.mkdir(parents=True, exist_ok=True)
print(f"\nYou can now save your data files in: {folder_path}")

if os.getenv("COLAB_RELEASE_TAG"):
#     %cd {folder_path}

"""### 0.b Disable Warnings Messages

> Do not modify this code before running it
"""

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

"""### 0.c Install Additional Packages

> If you are using additional packages, you need to install them here using the command: `! pip install <package_name>`
"""

# <Student to fill this section>

"""### 0.d Import Packages"""

import ipywidgets as widgets
import pandas as pd
import altair as alt
import numpy as np
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from itertools import product

"""---
## A. Project Description

"""

# @title Student Information
wgt_student_name = widgets.Text(
    value=None,
    placeholder='<student to fill this section>',
    description='Student Name:',
    style={'description_width': 'initial'},
    disabled=False
)

wgt_student_id = widgets.Text(
    value=None,
    placeholder='<student to fill this section>',
    description='Student Id:',
    style={'description_width': 'initial'},
    disabled=False
)

widgets.HBox([wgt_student_name, wgt_student_id])

# @title Experiment ID

wgt_experiment_id = widgets.BoundedIntText(
    value=2,
    min=0,
    max=3,
    step=1,
    description='Experiment ID:',
    style={'description_width': 'initial'},
    disabled=False
)
wgt_experiment_id

# @title Business Objective

wgt_business_objective = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Business Objective:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_business_objective

"""---
## B. Experiment Description
"""

# @title Experiment Hypothesis

wgt_experiment_hypothesis = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Experiment Hypothesis:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_experiment_hypothesis

# @title Experiment Expectations

wgt_experiment_expectations = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Experiment Expectations:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_experiment_expectations

"""---
## C. Data Understanding

### C.1   Load Datasets

> Do not change this code
"""

# Load training data
X_train = pd.read_csv(folder_path / 'X_train.csv')
y_train = pd.read_csv(folder_path / 'y_train.csv')

# Load validation data
X_val = pd.read_csv(folder_path / 'X_val.csv')
y_val = pd.read_csv(folder_path / 'y_val.csv')

# Load testing data
X_test = pd.read_csv(folder_path / 'X_test.csv')
y_test = pd.read_csv(folder_path / 'y_test.csv')

"""---
## D. Feature Selection

"""

# <Student to fill this section>

features_list = ['number_of_bedrooms','floor_area','number_of_bathrooms','month','level_numerator','level_ratio','tenancy_preference_Bachelors','tenancy_preference_Bachelors/Family','tenancy_preference_Family','suburb_Brisbane','suburb_Canberra','suburb_Melbourne','suburb_Perth','suburb_Sydney','furnished_encoded']

# @title Feature Selection Explanation

wgt_feat_selection_explanation = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Feature Selection Explanation:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_feat_selection_explanation

"""---
## E. Train Machine Learning Model

### E.1 Import Algorithm

> Provide some explanations on why you believe this algorithm is a good fit
"""

# <Student to fill this section>
from sklearn.linear_model import ElasticNet

# @title Algorithm Selection Explanation

wgt_algo_selection_explanation = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Algorithm Selection Explanation:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_algo_selection_explanation

"""### E.2 Set Hyperparameters

> Provide some explanations on why you believe this algorithm is a good fit

"""

# <Student to fill this section>

alpha_values = [0.0002, 0.001, 0.005, 0.1, 1]
l1_ratio_values = [0.1, 0.5, 0.9, 1]

# @title Hyperparameters Selection Explanation

wgt_hyperparams_selection_explanation = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Hyperparameters Selection Explanation:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_hyperparams_selection_explanation

"""### E.3 Fit Model"""

# <Student to fill this section>
predictions = {}

for alpha, l1_ratio in product(alpha_values, l1_ratio_values):
    model = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_val)

    # Store predictions in a dictionary
    key = f"y_pred_{alpha}_{l1_ratio}"
    predictions[key] = y_pred

"""### E.4 Model Technical Performance

> Provide some explanations on model performance

"""

# <Student to fill this section>
for alpha, l1_ratio in product(alpha_values, l1_ratio_values):
    mse = mean_squared_error(y_val, predictions[f"y_pred_{alpha}_{l1_ratio}"])
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_val, predictions[f"y_pred_{alpha}_{l1_ratio}"])
    r2 = r2_score(y_val, predictions[f"y_pred_{alpha}_{l1_ratio}"])

    print(f"alpha = {alpha}, l1_ratio = {l1_ratio}")
    print(f"RMSE: {rmse}")
    print(f"MAE: {mae}")
    print(f"R2: {r2}")
    print(".............................")

# @title Model Performance Explanation

wgt_model_performance_explanation = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Model Performance Explanation:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_model_performance_explanation

"""### E.5 Business Impact from Current Model Performance

> Provide some analysis on the model impacts from the business point of view

"""

# <Student to fill this section>

y_1 = y_train['rent']
y_pred = predictions[f"y_pred_{0.0002}_{1}"]
y_pred = pd.DataFrame(y_pred, columns=['rent_pred'])
y_2 = y_pred['rent_pred']

train_set = alt.Chart(pd.DataFrame({'target': y_1, 'preds': y_1})).mark_line(color='green').encode(
    x='target',
    y='preds'
)
test_set = alt.Chart(pd.DataFrame({'target': y_1, 'preds': y_2})).mark_line().encode(
    x='target',
    y='preds'
  )

test_set + train_set

model_final = ElasticNet(alpha=0.0002, l1_ratio=1, random_state=42)
model_final.fit(X_train, y_train)

y_pred_final = model_final.predict(X_test)

mse_final = mean_squared_error(y_test, y_pred_final)
rmse_final = np.sqrt(mse_final)
mae_final = mean_absolute_error(y_test, y_pred_final)
r2_final = r2_score(y_test, y_pred_final)

print(f"RMSE: {rmse_final}")
print(f"MAE: {mae_final}")
print(f"R2: {r2_final}")

# @title Model Business Impacts Explanation

wgt_model_business_explanation = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Model Business Impacts Explanation:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_model_business_explanation

"""## F. Experiment Outcomes"""

# @title Experiment Outcomes Explanation

wgt_experiment_outcomes_explanation = widgets.Select(
    options=['Hypothesis Confirmed', 'Hypothesis Partially Confirmed', 'Hypothesis Rejected'],
    value='Hypothesis Rejected',
    description='Experiment Outcomes:',
    disabled=False,
)

wgt_experiment_outcomes_explanation

# @title Experiments Results Explanation

wgt_experiment_results_explanation = widgets.Textarea(
    value=None,
    placeholder='<student to fill this section>',
    description='Experiments Results Explanation:',
    disabled=False,
    style={'description_width': 'initial'},
    layout=widgets.Layout(height="100%", width="auto")
)
wgt_experiment_results_explanation